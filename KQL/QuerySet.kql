// KQL queries for Incremental updates.

.show table  ingest policy ingestionbatching 

.show database ['EH-RTI-Migration']  policy ingestionbatching

// bronze table load

.create table bronze (timestamp: datetime, device: string, category: string, ['location']: string, 
productionLine: string, lineUpl: string, ['data']: dynamic)

.create-or-alter function with (docstring = "Defines the transformation from ingest table to bronze table", folder = "UpdatePolicies") 
UpdatePolicy_Ingest() {
    ingest
    | project timestamp, 
              device=tostring(properties.device), 
              category=tostring(properties.category),
              location=tostring(properties.location), 
              productionLine=tostring(properties.productionLine),
              lineUpl=tostring(properties.lineUpl), 
              data
}

.alter table bronze policy update @'[{"Source": "ingest", "Query": "UpdatePolicy_Ingest()", "IsEnabled": true}]'

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

.create-or-alter function with (docstring = "Transforms bronze table data for IRI measurements into a structured format", folder = "UpdatePolicies")
 BronzeToIRIMeasurements() {
    bronze
    | where device == 'iri' and category == 'measurements'
    | project utctimestamp=timestamp, 
              location, 
              production_line=productionLine, 
              lineup=lineUpl,
              id_container=tostring(data.idContainer), 
              leg=tostring(data.fp), 
              pocket=tostring(data.pocket),
              cavity=tostring(data.cavity), 
              position=tostring(data.position), 
              measurements=data.measurements
    | mv-expand kind=array measurements // New line for each inspection_name
    | extend inspection_name=tostring(measurements[0]), measurements=measurements[1]
    | mv-expand kind=array measurements // New line for each measurement_name for a given inspection_name
    | extend measurement_name=tostring(measurements[0]),
             measurements=bag_remove_keys(measurements[1], dynamic(['probeNames','thresholds'])),
             probe_names=measurements[1]['probeNames'], 
             thresholds=measurements[1]['thresholds']
    | mv-expand kind=array measurements // New line for each measurement_probe
    | extend probe_number=substring(measurements[0], 6, 1), 
             value=toreal(measurements[1]) // Extract probe number to pair with label and threshold as well as measurement value
    | extend probe_label=strcat(probe_number, " ", probe_names[probe_number]), 
             threshold=thresholds[probe_number]
    | project-away measurements, probe_names, thresholds, probe_number
}

.drop table Silver_IRIMeasurements;

.create table Silver_IRIMeasurements (
    utctimestamp: datetime,
    location: string,
    production_line: string,
    lineup: string,
    id_container: string,
    leg: string,
    pocket: string,
    cavity: string,
    position: string,
    inspection_name: string,
    measurement_name: string,
    value: real,
    probe_label: string,
    threshold: dynamic
)

.alter table Silver_IRIMeasurements policy update @'[{"Source": "bronze", "Query": "BronzeToIRIMeasurements()", "IsEnabled": true}]'


Silver_IRIMeasurements | take 100

Silver_IRIMeasurements | where ingestion_time() >= ago(5s) | take 10

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

.create-or-alter function with (docstring = "Transforms bronze table data for IRI measurements into a structured format", folder = "UpdatePolicies")
 BronzeToIRIDefects() {
    bronze
    | where device == "iri" and category == "defects"
    | project utctimestamp = timestamp, 
          lineupl = lineUpl, 
          location, 
          id_container = tostring(data.idContainer), 
          leg = tostring(data.fp), position = tostring(data.position), 
          defects = data.defects
    | mv-expand defects  // Expands defects into separate rows
    | extend inspection_name = tostring(defects[0]), defects = defects[1]
    | mv-expand probe = bag_keys(defects) 
    | extend defect_name = tostring(defects[tostring(probe)]) 
    | project-away defects
}

.drop table Silver_IRIDefects;

.create table Silver_IRIDefects (
    utctimestamp: datetime,
    lineupl: string,
    location: string,
    id_container: string,
    leg: string,
    position: string,
    inspection_name: string,
    probe: dynamic,
    defect_name: string
)

.alter table Silver_IRIDefects policy update @'[{"Source": "bronze", "Query": "BronzeToIRIDefects()", "IsEnabled": true}]'

Silver_IRIDefects | count

Silver_IRIDefects | where ingestion_time() >= ago(5s) | take 10

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

.drop function BronzeToColdsystemMx

.create-or-alter function with (docstring = "Transforms bronze table data for IRI measurements into a structured format", folder = "UpdatePolicies")
 BronzeToColdsystemMx() {
    bronze
    | where device == "coldsystem" and category == "mx"
    | project utctimestamp=timestamp, location, production_line=productionLine, 
              lineupl=lineUpl, id_container=tostring(data.ContainerID), 
              leg=tostring(data.Leg), pocket="", 
              cavity=tostring(data.MoldNumber), 
              position=tostring(data.Position), 
              measurements=data.measurements
    | mv-expand kind=array measurements // Expand sensor IDs
    | extend inspection_name=tostring(measurements[0]), measurements=measurements[1].measures
    | where isnotempty(measurements) // Filter out empty measurements
    | mv-expand kind=array measurements // Expand measurement names per sensor
    | extend probe_label = "", threshold=dynamic(null) // Schema alignment
    | extend measurement_name=tostring(measurements[0]), value=toreal(measurements[1])
    | project-away measurements
}

.drop table Silver_TESMeasurements;

.create table Silver_TESMeasurements (
    utctimestamp: datetime,
    location: string,
    production_line: string,
    lineupl: string,
    id_container: string,
    leg: string,
    pocket: string,
    cavity: string,
    position: string,
    inspection_name: string,
    probe_label: string,
    threshold: dynamic,
    measurement_name: string,
    value: real
)

.alter table Silver_TESMeasurements policy update @'[{"Source": "bronze", "Query": "BronzeToColdsystemMx()", "IsEnabled": true}]'

Silver_TESMeasurements | count

Silver_TESMeasurements | where ingestion_time() >= ago(5s) | take 10


///////////////////////////////////////////////////////////////////////////////////////////////////////////////

.create-or-alter function with (docstring = "Transforms bronze table data for IRI measurements into a structured format", folder = "UpdatePolicies")
 BronzeToBlankWatchTemperature() {
bronze
| where device == 'blank-watch' and category == 'temperature'
| project utctimestamp = timestamp, 
        location, 
        production_line = productionLine, 
        lineupl = lineUpl, 
        cycle = tostring(data.cycle), 
        section = tostring(data.section), 
        gob = tostring(data.gob), 
        temp_timestamps = parse_json(data.temp_timestamps), 
        temperatures = parse_json(data.temperatures)
| mv-expand measurement_name = bag_keys(temperatures)
| extend 
    temperature = todouble(temperatures[tostring(measurement_name)]), 
    utctimestamp_measurement = todatetime(temp_timestamps[tostring(measurement_name)])
| project-away temp_timestamps, temperatures
}

.drop table Silver_BlankWatchTemperature;

.create table Silver_BlankWatchTemperature (
    utctimestamp: datetime,
    location: string,
    production_line: string,
    lineupl: string,
    cycle: string,
    section: string,
    gob: string,
    measurement_name: dynamic ,
    temperature: real,
    utctimestamp_measurement: datetime
)

.alter table Silver_BlankWatchTemperature policy update @'[{"Source": "bronze", "Query": "BronzeToBlankWatchTemperature()", "IsEnabled": true}]'

Silver_BlankWatchTemperature | count

Silver_BlankWatchTemperature | where ingestion_time() >= ago(5s) | take 10

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

.create-or-alter function with (docstring = "Transforms bronze table data for IRI measurements into a structured format", folder = "UpdatePolicies")
 BronzeToBlankWatchGobLoading() {
bronze
| where device == "blank-watch" and category == "gob-loading"
| project utctimestamp=timestamp, 
          location, 
          production_line=productionLine, 
          lineupl=lineUpl, 
          cycle=tostring(data.cycle), 
          section=tostring(data.section), 
          gob=tostring(data.gob), 
          position=tostring(data.position),
          data=bag_remove_keys(data, dynamic(["position", "cycle", "section", "gob"]))
| mv-expand kind=array data
| extend measurement_name=tostring(data[0]), value=toreal(data[1])
| project-away data 
}

.create table Silver_BlankWatchGobLoading (
    utctimestamp: datetime,
    location: string,
    production_line: string,
    lineupl: string,
    cycle: string,
    section: string,
    gob: string,
    position: string,
    measurement_name: string,
    value: real
)

.alter table Silver_BlankWatchGobLoading policy update @'[{"Source": "bronze", "Query": "BronzeToBlankWatchGobLoading()", "IsEnabled": true}]'

Silver_BlankWatchGobLoading | count

Silver_BlankWatchGobLoading | where ingestion_time() >= ago(5s) | take 10


// KQL Queries for History update

.show tables

.show table silver extents

///////////////////////////////////////////////////

silver
| summarize min(timestamp)
//1899-12-30T00:00:00.000Z 


silver
| summarize max(timestamp)
//2025-06-11T22:01:00.000Z


.show table silver extents
| where MinCreatedOn between (datetime(2025-05-01 00:00:00) .. datetime(2025-05-07 18:32:48.464))
| project ExtentId, MinCreatedOn, MaxCreatedOn, RowCount, OriginalSize, CompressedSize, DatabaseName, TableName
| order by MinCreatedOn asc

.show table silver extents
| where MinCreatedOn between (datetime(2025-05-01 00:00:00) .. datetime(2025-05-07 18:32:48.464))
| summarize TotalRows = sum(RowCount)



.show table silver extents
| where MinCreatedOn between (datetime(2025-05-01 00:00:00) .. datetime(2025-05-07 18:32:48.464))
| project ExtentId, MinCreatedOn, MaxCreatedOn
| summarize min(MinCreatedOn), max(MaxCreatedOn)


--------------------------------------------

.show table silver extents
| where MinCreatedOn between (datetime(2025-05-01 00:00:00) .. datetime(2025-05-07 18:32:48.464)) 
or MaxCreatedOn between (datetime(2025-05-01 00:00:00) .. datetime(2025-05-07 18:32:48.464))
| project ExtentId;

silver | where ingestion_time() between (datetime(2025-05-01 00:00:00) .. datetime(2025-05-07 18:32:48.464)) 
and extent_id() in (
'f5a06aa3-ef67-413b-9dc3-4bea669b9d26',
'f1bd9cd2-5b5c-4c7f-8a06-562451d11b6e',
'ec02147e-abeb-42b9-a40d-fb77eea9783d',
'd38b4a24-b6d9-4612-8e4a-d2da01a822fa',
'cacef5a8-cb70-42fc-b4be-6bc2172d5aac',
'c8ed2ebc-ffdb-4ac3-b847-4ae69c235002',
'c7d62856-cbf8-4d8e-a283-1808f651a697',
'c3bcca63-b901-4e0f-996b-5b20e9cef87b',
'c26a22c9-3bf4-41c8-966f-7aca0082c095',
'bfd7026f-7ba2-4297-830c-a7dc6b98d75c',
'bc372277-f1a4-4c25-816c-7f643c41369a',
'b5285de9-f54d-4466-9d13-85938c9fc710',
'b0acd69b-34a3-43a5-bb3e-c3ea215a1d5f',
'b0a65981-9ccb-483d-adbe-f0bb04b8df89',
'95597e81-f08b-4dda-8a89-baee5c269f1a',
'907c0d94-84dd-4180-99e2-938df8bad55f',
'7e9d15bb-a3b8-4b7b-8978-4b2a20dabe77',
'7d1299ec-a7be-4741-8aec-4ede2b90da39',
'6e481fd0-75de-4c83-beed-fc55de4a0e74',
'6de88721-b321-4f3b-b8c1-80fc750e557b',
'628e80a3-e3c9-43d6-a999-873a94b18557',
'5b0949ee-ddd5-4add-8f2f-2b8cb10c2ec1',
'54637fd4-8da9-4336-8dfc-f1f870eb56e4',
'4f826269-bde7-470d-9d3a-3be000e2ce6e',
'484611c1-155d-4983-af40-62b6fb027bf3',
'480f607b-a99a-4cc2-a4cd-173bc5547f2e',
'286167e2-12fc-49f3-b56f-e34af1aca46a',
'1d2fd266-0d42-4a72-944e-aca43f93d228',
'1ad10319-d28c-465b-8923-5497c852cf77',
'04cfcc26-d013-46c1-9d66-fa2a2918d863'
)
| count



.show commands

.show commands-and-queries 
| where User == 'u590694.ext@o-i.com'


